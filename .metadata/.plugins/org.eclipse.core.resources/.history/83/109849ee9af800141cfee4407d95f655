package il.ac.technion.cs.sd.app.mail;

import il.ac.technion.cs.sd.msg.Messenger;
import il.ac.technion.cs.sd.msg.MessengerException;
import il.ac.technion.cs.sd.msg.MessengerFactory;

/**
 * The server side of the TMail application. <br>
 * This class is mainly used in our tests to start, stop, and clean the server
 */
public class ServerMailApplication {
	
	private String _name;
	private Messenger _messenger;
	
	
	
	/**
	 * Starts a new mail server. Servers with the same name retain all their information until
	 * {@link ServerMailApplication#clean()} is called.
	 * 
	 * @param name The name of the server by which it is known.
	 */
	public ServerMailApplication(String name) {
		_name = name;
		try {
			_messenger = new MessengerFactory().start("serveraddress");
		}
		catch (MessengerException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * @return the server's address; this address will be used by clients connecting to 
	 * the server
	 */
	public String getAddress() {
		return _messenger.getAddress();
	}
	
	/**
	 * Starts the server; any previously sent mails, data and indices under this server 
	 * name are loaded. It is possible to start a new server instance in same, or 
	 * another process. 
	 * You may assume that two server instances with the same name won't be in parallel. 
	 * Similarly, {@link ServerMailApplication#stop()} will be called before subsequent
	 * calls to {@link ServerMailApplication#start()}.
	 */
	public void start() {
		try {
			while(true) {
				System.out.println("Listening...");
//				String message = new String(_messenger.listen());
				Optional<byte[]> message = _messenger.tryListen();
				System.out.println("Recieved: " + message);
				String[] tokens = message.split(">");
				String sender = tokens[0];
				String whom = tokens[1];
				message = tokens[2];
				UserMessagesMapper.getInstance().addMessageToUser(sender, whom, message);
			}
		}
		catch (MessengerException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	 * Stops the server. A stopped server can't accept mail, but doesn't delete any data. A stopped server does not use
	 * any system resources (e.g., messengers).
	 */
	public void stop() {
		throw new UnsupportedOperationException("Not implemented");
	}
	
	/**
	 * Deletes <b>all</b> previously saved data. This method will be used between tests to assure that each test will
	 * run on a new, clean server. you may assume the server is stopped before this method is called.
	 */
	public void clean() {
		throw new UnsupportedOperationException("Not implemented");
	}
}
