package il.ac.technion.cs.sd.app.mail;

import il.ac.technion.cs.sd.msg.Messenger;
import il.ac.technion.cs.sd.msg.MessengerException;
import il.ac.technion.cs.sd.msg.MessengerFactory;

import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.json.JSONObject;

class Server {

	private String name;
	private String address;
	private static final String FROM_KEY = "from";
	private Messenger _messenger;
	
	private HashMap<String, ArrayList<String>> userToContacts = new HashMap<>();
	
	private HashMap<String, LinkedList<Mail>> userToMailsSent = new HashMap<>();
	private Map<String, LinkedList<Mail>> userToAllMails = new HashMap<>();
	private Map<String, LinkedList<Mail>> userToNewMails = new HashMap<>();
	
	
	Server(String name, String address) {
		this.name = name;
		this.address = address;
		try {
			_messenger = new MessengerFactory().start(address);
		}
		catch (MessengerException e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
	}
	
	String getAddress() {
		return address;
	}
	
	private void addMailSentFromUser(String sender, Mail mail) {
		LinkedList<Mail> list = (LinkedList<Mail>) userToMailsSent.get(sender);
		if (list == null) {
			list = new LinkedList<Mail>();
		}
		list.addFirst(mail);
		userToMailsSent.put(sender, list);
	}
	
	private void addNewMessageToUser(String receiver, Mail mail) {
		LinkedList<Mail> list = (LinkedList<Mail>) userToNewMails.get(receiver);
		if (list == null) {
			list = new LinkedList<Mail>();
		}
		list.addFirst(mail);
		userToNewMails.put(receiver, list);
	}
	
	private void addMailToUser(String receiver, Mail mail) {
		LinkedList<Mail> list = (LinkedList<Mail>) userToAllMails.get(receiver);
		if (list == null) {
			list = new LinkedList<Mail>();
		}
		list.addFirst(mail);
		userToAllMails.put(receiver, list);
	}
	
//	private List<Mail> getUserMails(String username) {
//		return userToAllMails.get(username);
//	}
	
	void start() {
		// TODO - Load data from database
		try {
			while(true) {
				// start listening to messages
				System.out.println("Listening...");
				String request = new String(_messenger.listen());
				// received message - handle request
				handleRequest(request); // TODO - continue implementing
				
				
				System.out.println("Server Recieved: " + request);
//				String[] tokens = request.split(">");
//				String sender = tokens[0];
//				String whom = tokens[1];
//				request = tokens[2];
				
//				if (request.equals("GET NEW MAIL")) {
//					List<String> allMails = getUserMails(sender);
//					
//					
//					JSONObject json = new JSONObject();
//					json.put("answer", allMails);
////					json.writeJSONString(out);
//					Writer writer = new StringWriter();
//					json.write(writer);
//					String jsonString = json.toString();
//					
//					_messenger.send(sender, jsonString.getBytes());
//				} 
//				else {
//					addMailSentToUser(sender, request); // outbox of the sender
//					addNewMessageToUser(whom, request);					
//				}
				
				
				
//				UserMessagesMapper.getInstance().addMessageToUser(sender, whom, message);
				
			}
		}
		catch (MessengerException e) {
			e.printStackTrace();
		}
	}
	
	private void handleRequest(String request) {
		JSONObject json = new JSONObject(request);
		Integer type = (Integer) json.get("type");
		
		if (type == RequestType.SEND_MAIL.ordinal()) {
			String sender = json.getString(FROM_KEY);
			String whom = json.getString("to");
			String message = json.getString("message");
			Mail mail = new Mail(sender, whom, message);
			addMailSentFromUser(sender, mail); // outbox of the sender
			addNewMessageToUser(whom, mail);
			addMailToUser(sender, mail);
			addMailToUser(whom, mail);
			addContactIfNotExist(sender, whom);
			return;
		}
		
		if (type == RequestType.REQUEST_GET_NEW_MAIL.ordinal()) {
			String username = json.getString(FROM_KEY);
			// TODO - change it later to New Mails
			List<Mail> list = userToAllMails.get(username);
//			if (list == null) {
//			}
			JSONObject answerJson = new JSONObject();
			answerJson.put(ResponseType.RESPONSE_KEY, ResponseType.GET_NEW_MAIL);
			List<String> mailStrings = mailListToStringList(list);
			answerJson.put(CommunicationKey.NEW_MAILS_KEY, mailStrings);
			try {
				_messenger.send(username, answerJson.toString().getBytes());
			}
			catch (MessengerException e) {
				e.printStackTrace();
				throw new RuntimeException();
			}
			return;
		}
		
		if (type == RequestType.REQUEST_GET_ALL_MAIL.ordinal()) {
			String username = json.getString(FROM_KEY);
			List<Mail> list = userToAllMails.get(username);
			JSONObject answerJson = new JSONObject();

			answerJson.put(ResponseType.RESPONSE_KEY, ResponseType.GET_ALL_MAIL);
			List<String> mailStrings = mailListToStringList(list);
			answerJson.put(CommunicationKey.ALL_MAILS_KEY, mailStrings);
			try {
				_messenger.send(username, answerJson.toString().getBytes());
			}
			catch (MessengerException e) {
				e.printStackTrace();
				throw new RuntimeException();
			}
			return;
		}
		
		if (type == RequestType.REQUEST_CONTACTS.ordinal()) {
			String sender = json.getString(FROM_KEY);
			List<String> contacts = userToContacts.get(sender);
			if (contacts == null) {
				// no contacts -> return an empty list
				contacts = new ArrayList<String>();
			}
			
			JSONObject answerJson = new JSONObject();
			answerJson.put(ResponseType.RESPONSE_KEY, ResponseType.GET_CONTACTS);
			answerJson.put("contacts", contacts);
			try {
				_messenger.send(sender, answerJson.toString().getBytes());
			}
			catch (MessengerException e) {
				e.printStackTrace();
			}
			return;
		}
		
		throw new UnsupportedOperationException("missing case");
	}

	private List<String> mailListToStringList(List<Mail> mails) {
		List<String> strings = new LinkedList<String>();
		for (Mail mail : mails) {
			String mailStr = mail.toString();
			strings.add(mailStr);
		}
		return strings;
	}
	
	private void addContactIfNotExist(String user, String newContact) {
		List<String> contacts = userToContacts.get(user);
		if (contacts == null) {
			contacts = new ArrayList<String>();
			contacts.add(newContact);
			return;
		}
		// otherwise - make the insertion alphabetically
		if (contacts.contains(newContact)) {
			return;
		}
		
		for (String contact : contacts) {
			if (contact.compareToIgnoreCase(newContact) < 0) {
				contacts.add(newContact);
				return;
			}
		}
		
	}
	
	private void userToAllMails(String whom, String message) {
		// TODO Auto-generated method stub
		
	}

	void getIncomingMail() {
		
	}

	void stop() {
		try {
			_messenger.kill();
		}
		catch (MessengerException e) {
			e.printStackTrace();
			throw new RuntimeException();
		}
	}
	
	void clean() {
		// TODO - Remove database
		throw new UnsupportedOperationException("Not implemented");
	}
}
